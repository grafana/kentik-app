{"version":3,"sources":["../../src/datasource/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import {metricList, unitList} from './metric_def';\nimport _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nclass KentikDatasource {\n\n  constructor(instanceSettings, backendSrv, templateSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  interpolateDeviceField(value, variable) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  query(options) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    var target = options.targets[0];\n    var deviceNames = this.templateSrv.replace(target.device, options.scopedVars, this.interpolateDeviceField.bind(this));\n\n    var query = {\n      version: \"2.01\",\n      query: {\n        device_name: deviceNames,\n        time_type: 'fixed', // or fixed\n        lookback_seconds: 3600,\n        starting_time: options.range.from.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        ending_time: options.range.to.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        metric: this.templateSrv.replace(target.metric),\n        fast_data: \"Auto\", // or Fast or Full\n        units: this.templateSrv.replace(target.unit)\n      },\n      filterSettings: {\n        connector: 'All',\n        filterString: '',\n        filterGroups: []\n      }\n    };\n\n    var endpoint = 'timeSeriesData';\n    if (target.mode === 'table') {\n      endpoint = 'topXData';\n    }\n\n    return this.backendSrv.datasourceRequest({\n      method: 'POST',\n      url: 'api/plugin-proxy/kentik-app/api/v4/dataExplorer/' + endpoint,\n      data: query\n    }).then(this.processResponse.bind(this, query, endpoint, options));\n  }\n\n  processResponse(query, endpoint, options, data) {\n    if (!data.data) {\n      return Promise.reject({message: 'no kentik data'});\n    }\n\n    var rows = data.data;\n    if (rows.length === 0) {\n      return [];\n    }\n\n    var metricDef = _.findWhere(metricList, {value: query.query.metric});\n    var unitDef = _.findWhere(unitList, {value: query.query.units});\n\n    if (endpoint === 'topXData') {\n      return this.processTopXData(rows, metricDef, unitDef, options);\n    } else {\n      return this.processTimeSeries(rows, metricDef, unitDef, options);\n    }\n  }\n\n  processTimeSeries(rows, metricDef, unitDef, options) {\n    var seriesList = {};\n    var endIndex = rows.length;\n\n    // if time range is to now ignore last data point\n    if (options.rangeRaw.to === 'now') {\n      endIndex = endIndex - 1;\n    }\n\n    for (var i = 0; i < endIndex; i++) {\n      var row = rows[i];\n      var value = row[unitDef.field];\n      var seriesName = row[metricDef.field];\n      var series = seriesList[seriesName];\n\n      if (!series) {\n        series = seriesList[seriesName] = {\n          target: seriesName,\n          datapoints: [],\n          unit: unitDef.gfUnit,\n          axisLabel: unitDef.gfAxisLabel\n        };\n      }\n\n      if (unitDef.transform) {\n        value = unitDef.transform(value, row);\n      }\n\n      var time = new Date(row.i_start_time).getTime();\n      series.datapoints.push([value, time]);\n    }\n\n    // turn seriesList hash to array\n    return { data: _.map(seriesList, value => value) };\n  }\n\n  processTopXData(rows, metricDef, unitDef, options) {\n    var table = new TableModel();\n    var rangeSeconds = (options.range.to.valueOf() - options.range.from.valueOf()) / 1000;\n\n    table.columns.push({text: metricDef.text});\n\n    for (let col of unitDef.tableFields) {\n      table.columns.push({text: col.text, unit: col.unit});\n    }\n\n    for (let row of rows) {\n      var seriesName = row[metricDef.field];\n\n      var values = [seriesName];\n      for (let col of unitDef.tableFields) {\n        var val = row[col.field];\n        var transform = col.transform || unitDef.transform;\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        if (transform) {\n          val = transform(val, row, rangeSeconds);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    }\n\n    return {data: [table]};\n  }\n\n  metricFindQuery(query) {\n    if (query === 'metrics()') {\n      return Promise.resolve(metricList);\n    }\n    if (query === 'units()') {\n      return Promise.resolve(unitList);\n    }\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: 'api/plugin-proxy/kentik-app/api/v1/device/list',\n    }).then(res => {\n      if (!res.data || !res.data.device) {\n        return [];\n      }\n\n      return res.data.device.map(device => {\n        return {text: device.device_name, value: device.device_name};\n      });\n    });\n  }\n}\n\nexport {KentikDatasource};\n"]}